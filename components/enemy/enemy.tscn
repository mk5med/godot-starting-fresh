[gd_scene load_steps=6 format=3 uid="uid://bcjdwcdloq6fa"]

[ext_resource type="Texture2D" uid="uid://buq3bvyw1eehp" path="res://assets/enemy.png" id="2_0ksqu"]
[ext_resource type="Texture2D" uid="uid://rkteka05dxkc" path="res://assets/enemy_detection_range.png" id="2_t6s1l"]

[sub_resource type="GDScript" id="GDScript_6fuhi"]
script/source = "## Enemy class
class_name Enemy
extends StaticBody2D
enum ENEMY_STATE { IDLE, MOVING, HUNTING }

var elapsed_time = 0
var vision_range = 5
@export var travel_points: Array[Vector2] = []

var index = 0

var baseState = ENEMY_STATE.IDLE
var state: ENEMY_STATE = baseState
var alertness = Alertness.new()
var player: Player = null
var hunt: Hunt = Hunt.new(self)


func followPath(delta):
	if len(travel_points) == 0:
		return

	# Find the direction from the target point to the current position in world space
	var direction = (travel_points[index] - position).normalized()

	look_at(direction)
	move_and_collide(direction * delta)

	# Increment the position to reach when the node is close enough
	if (position - travel_points[index]).length() <= 5:
		index += 1

	# Loop back when the index exceeds the array size
	if len(travel_points) <= index:
		index = 0
		return


func _physics_process(delta):
	elapsed_time += delta

	# If the enemy is hunting
	if state == ENEMY_STATE.HUNTING:
		# Track the player while in range
		if player != null:
			hunt.setSearchPos(player.position)
			hunt.setState(Hunt.HUNT_STATE.CHASING)
		else:
			hunt.setState(Hunt.HUNT_STATE.SEARCHING)

		hunt.update(delta)

		# Don't process further
		if hunt.state != Hunt.HUNT_STATE.LOST:
			return

	# Update the alertness
	alertness.update(player != null, delta)
	var aLevel = alertness.alertLevel

	if aLevel == Alertness.ALERT_LEVEL.CALM:
		# Return to normal
		state = baseState
	elif aLevel == Alertness.ALERT_LEVEL.LOW:
		# Stop and wait for something to happen
		state = ENEMY_STATE.IDLE
	elif aLevel == Alertness.ALERT_LEVEL.HIGH:
		# Hunt the suspicious activity
		state = ENEMY_STATE.HUNTING

	if state == ENEMY_STATE.MOVING:
		followPath(delta)


func _on_detection_area_body_entered(body):
	print(\"Entered \", body)
	player = body
	hunt.setSearchPos(player.position)
	pass


func _on_detection_area_body_exited(body):
	print(\"Exited \", body)
	player = null
	pass
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_8ku6j"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fcma1"]
size = Vector2(120.5, 46)

[node name="enemy" type="StaticBody2D"]
script = SubResource("GDScript_6fuhi")
travel_points = null

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_8ku6j")

[node name="DetectionArea" type="Area2D" parent="."]
collision_layer = 3
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="DetectionArea"]
position = Vector2(59.75, 0)
shape = SubResource("RectangleShape2D_fcma1")

[node name="Sprite2D" type="Sprite2D" parent="DetectionArea"]
position = Vector2(60.7285, 2)
rotation = -1.5708
scale = Vector2(0.20864, 0.237876)
texture = ExtResource("2_t6s1l")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.0859375, 0.0859375)
texture = ExtResource("2_0ksqu")

[node name="Forward" type="Sprite2D" parent="."]
position = Vector2(11, 0)
scale = Vector2(0.0859375, 0.0078125)
texture = ExtResource("2_0ksqu")

[connection signal="body_entered" from="DetectionArea" to="." method="_on_detection_area_body_entered"]
[connection signal="body_exited" from="DetectionArea" to="." method="_on_detection_area_body_exited"]
